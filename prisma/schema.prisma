// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/dbu/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProductStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum Role {
  user
  curator
  moderator
  editor
  supplier
  admin
  employee
  superadmin
  banned
}

model Product {
  id          Int           @id @default(autoincrement())
  slug        String        @unique
  name        String
  description String
  tags        String[]
  status      ProductStatus @default(DRAFT)
  details     Json?
  featured    Boolean       @default(false)
  newArrival  Boolean       @default(false)
  sale        Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  variants ProductVariant[]
  options  ProductOption[]

  collections CollectionOnProduct[]

  @@index([slug])
  @@index([name])
  @@index([status, featured, createdAt(sort: Desc)])
  @@index([status, newArrival, createdAt(sort: Desc)])
  @@index([status, sale, createdAt(sort: Desc)])
  @@index([status])
  @@index([featured])
  @@index([newArrival])
  @@index([sale])
  @@index([tags], type: Gin)
}

model ProductOption {
  id        Int      @id @default(autoincrement())
  name      String // e.g., "Color", "Size"
  values    String[] // e.g., ["Red", "Blue", "Green"]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, name])
}

model ProductVariant {
  id        Int      @id @default(autoincrement())
  sku       String?  @unique
  price     Float
  salePrice Float?
  stock     Int      @default(0)
  images    String[]
  options   Json // e.g., {"Color": "Red", "Size": "M"}
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([sku])
  @@index([price])
  @@index([options], type: Gin)
}

model Category {
  id          Int      @id @default(autoincrement())
  slug        String   @unique
  name        String   @unique
  description String?
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products Product[]

  parentId Int?
  parent   Category?  @relation("SubCategories", fields: [parentId], references: [id], onDelete: Restrict)
  children Category[] @relation("SubCategories")

  @@index([slug])
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  role          Role?     @default(user)
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?
  isAnonymous   Boolean?
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id             String   @id
  expiresAt      DateTime
  token          String
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@index([identifier])
  @@map("verification")
}

model Collection {
  id          Int      @id @default(autoincrement())
  slug        String   @unique
  name        String
  description String?
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products CollectionOnProduct[]

  @@index([slug])
}

model CollectionOnProduct {
  collectionId Int
  productId    Int
  assignedAt   DateTime @default(now())

  collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  product    Product    @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([collectionId, productId])
}
